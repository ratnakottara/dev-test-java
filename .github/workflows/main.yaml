name: SonarQube and Build JAR File

on:
  push:
    branches:
      - dev

jobs:
  sonarqube:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'  # or 'temurin'
        architecture: x64
        check-latest: false
        server-id: github
        server-username: GITHUB_ACTOR
        server-password: GITHUB_TOKEN
        overwrite-settings: true
        job-status: success

    - name: Install SonarScanner
      run: |
        # Specify the SonarScanner version
        SONAR_SCANNER_VERSION="5.0.0.2966"
        # Determine the OS
        if [ "$RUNNER_OS" == "Windows" ]; then
          # For Windows runners
          SONAR_SCANNER="sonar-scanner.bat -D"sonar.projectKey=Demo" -D"sonar.sources=." -D"sonar.host.url=http://localhost:9000" -D"sonar.login=sqp_75b9ee2c41c92af2e81a78f035c60abb618a7cc5""
        else
          # For Linux runners
          SONAR_SCANNER="sonar-scanner -D"sonar.projectKey=Demo" -D"sonar.sources=." -D"sonar.host.url=http://localhost:9000" -D"sonar.login=sqp_75b9ee2c41c92af2e81a78f035c60abb618a7cc5""
        fi
        # Download and install SonarScanner
        curl -sSL "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip" -o sonar-scanner.zip
        unzip sonar-scanner.zip
        sudo mv sonar-scanner-${SONAR_SCANNER_VERSION}-linux /opt/sonar-scanner
        echo "export PATH=\$PATH:/opt/sonar-scanner/bin" | sudo tee -a /etc/profile
        
    - name: Run SonarQube Scanner
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        SONAR_PROJECT_KEY: Demo # Replace with your project key
      run: |
        # Run SonarQube analysis
        $SONAR_SCANNER
  build_jar:
    runs-on: ubuntu-latest
    needs: sonarqube

    steps:
    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'  # or 'temurin'
        architecture: x64
        check-latest: false
        server-id: github
        server-username: GITHUB_ACTOR
        server-password: GITHUB_TOKEN
        overwrite-settings: true
        job-status: success

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        ref: dev

    - name: Build JAR
      run: |
        cd $GITHUB_WORKSPACE
        # Compile your Java code
        javac HelloWorld.java
        # Create a JAR file
        jar cfe HelloWorld.jar HelloWorld HelloWorld.class
    - name: Upload JAR Artifact
      uses: actions/upload-artifact@v2
      with:
        name: HelloWorld-JAR
        path: HelloWorld.jar
