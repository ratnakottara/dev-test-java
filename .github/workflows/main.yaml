name: SonarQube-Scan, Build Docker, and Push to ECR

on:
  push:
    branches:
      - dev

jobs:
  sonarqube:
    name: SonarQube Trigger
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: dev

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
          architecture: 'x64'
          server-id: 'github'
          server-username: ${{ github.actor }}
          server-password: ${{ secrets.GITHUB_TOKEN }}
          overwrite-settings: true
          job-status: 'success'

      - name: Delete SonarQube cache
        run: |
          if [ -d $HOME/.sonar ]; then
            rm -rf $HOME/.sonar
          fi

      - name: SonarQube Scan
        run: |
          curl -sSL "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.0.2966-linux.zip" -o sonar-scanner.zip
          unzip sonar-scanner.zip
          echo "sonar.host.url=${{ secrets.SONAR_HOST_URL }}" >> sonar-scanner-5.0.0.2966-linux/conf/sonar-scanner.properties
          echo "sonar.login=${{ secrets.SONAR_TOKEN }}" >> sonar-scanner-5.0.0.2966-linux/conf/sonar-scanner.properties
          echo "sonar.projectKey=sample" >> sonar-scanner-5.0.0.2966-linux/conf/sonar-scanner.properties
          ./sonar-scanner-5.0.0.2966-linux/bin/sonar-scanner
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Change to repository root
        run: cd $GITHUB_WORKSPACE

      - name: Compile Java code and create JAR File
        run: |
          javac HelloWorld.java
          jar cfe HelloWorld.jar HelloWorld HelloWorld.class
      - name: Save JAR as Artifact
        uses: actions/upload-artifact@v2
        with:
          name: HelloWorld-JAR
          path: HelloWorld.jar

  build:
    name: Build and Push Docker Image
    needs: sonarqube
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Update and Upgrade
        run: |
          sudo apt-get update
          sudo apt-get -y upgrade

      - name: Remove conflicting packages
        run: |
          sudo apt-get remove -y containerd.io

      - name: Install Docker
        run: |
          sudo apt-get install -y docker.io
          sudo systemctl start docker
          sudo systemctl enable docker

      - name: Verify AWS CLI
        run: aws --version

      - name: Check Docker Version
        run: docker --version

      - name: Download JAR Artifact
        uses: actions/download-artifact@v2
        with:
          name: HelloWorld-JAR
          path: .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        run: docker build -t my-java-app .

      - name: Authenticate to Amazon ECR
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 390067525135.dkr.ecr.ap-south-1.amazonaws.com
      - name: Push Docker image to ECR
        run: |
          docker tag my-java-app:latest 390067525135.dkr.ecr.ap-south-1.amazonaws.com/my-java-app:latest
          docker push 390067525135.dkr.ecr.ap-south-1.amazonaws.com/my-java-app:latest

      - name: Sign Docker image with Cosign
        run: |
          docker pull 390067525135.dkr.ecr.ap-south-1.amazonaws.com/my-java-app:latest
          cosign sign -key cosign.key 390067525135.dkr.ecr.ap-south-1.amazonaws.com/my-java-app:latest
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

      - name: Save JAR as Artifact
        uses: actions/upload-artifact@v2
        with:
          name: HelloWorld-JAR
          path: HelloWorld.jar
