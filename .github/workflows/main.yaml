name: SonarQube-Scan and Build JAR

on:
  # Trigger analysis when pushing to the main branch.
  push:
    branches:
      - dev

jobs:
  sonarqube:
    name: SonarQube Trigger
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: dev

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: 17
        distribution: 'adopt'
        architecture: x64
        check-latest: false
        server-id: github
        server-username: GITHUB_ACTOR
        server-password: GITHUB_TOKEN
        overwrite-settings: true
        job-status: success

    - name: Delete SonarQube cache
      run: |
        if (Test-Path $HOME\.sonar) {
          Remove-Item -Path $HOME\.sonar -Force -Recurse
        }
      shell: pwsh

    - name: Download and Extract SonarScanner
      run: |
        # Download and unzip SonarScanner 5
        $sonarScannerUrl = "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.0.2966-windows.zip"
        $sonarScannerZip = Join-Path $env:USERPROFILE sonar-scanner.zip
        Invoke-WebRequest -Uri $sonarScannerUrl -OutFile $sonarScannerZip
        Expand-Archive -Path $sonarScannerZip -DestinationPath $env:USERPROFILE
        Remove-Item -Path $sonarScannerZip
        # Configure SonarScanner properties (adjust as needed)
        echo "sonar.host.url=${{ secrets.SONAR_HOST_URL }}" >> "$env:USERPROFILE\sonar-scanner-5.0.0.2966-windows\conf\sonar-scanner.properties"
        echo "sonar.login=${{ secrets.SONAR_TOKEN }}" >> "$env:USERPROFILE\sonar-scanner-5.0.0.2966-windows\conf\sonar-scanner.properties"
        echo "sonar.projectKey=sample" >> "$env:USERPROFILE\sonar-scanner-5.0.0.2966-windows\conf\sonar-scanner.properties"
      shell: pwsh

    - name: SonarQube Scan
      run: |
        # Run SonarScanner
        $sonarScannerDir = "$env:USERPROFILE\sonar-scanner-5.0.0.2966-windows"
        & "$sonarScannerDir\bin\sonar-scanner.bat"
      shell: pwsh

    - name: Change to repository root
      run: cd $GITHUB_WORKSPACE

    - name: Save JAR as Artifact
      uses: actions/upload-artifact@v2
      with:
        name: HelloWorld-JAR  # Name of the artifact
        path: HelloWorld.jar  # Path to the JAR file
    - name: Set Workflow Completion Flag
      run: echo "Workflow completed" > workflow-completed.flag
      working-directory: ${{ github.workspace }}
